<templateSet group="React">
  <template name="prms" value="new Promise((resolve, reject) =&gt; {&#10;  $FUNC_BODY$&#10;})" description="new Promise" toReformat="false" toShortenFQNames="true">
    <variable name="FUNC_BODY" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="bspg" value="/**&#10; * @name page template&#10; * @description 页面模板&#10; * @route /demo&#10; * @author wangqi&#10; */&#10;&#10;import React, { PureComponent } from 'react'&#10;&#10;import styl from './index.module.styl'&#10;&#10;import qs from 'query-string'&#10;import http from '@/services/http'&#10;import { getDefaultPlainData, setDataFulfilled, setDataPending, setDataRejected } from '@/utils/Data'&#10;&#10;import BasePage from '@/components/Page'&#10;&#10;class Page extends PureComponent {&#10;  data = {&#10;    id: '',&#10;  }&#10;&#10;  state = {&#10;    pageData: getDefaultPlainData(),&#10;  }&#10;&#10;  fetchPageData() {&#10;    return new Promise((resolve, reject) =&gt; {&#10;      this.setState({&#10;        pageData: setDataPending(getDefaultPlainData(), this.state.pageData)&#10;      }, () =&gt; {&#10;        http.demo({&#10;          id: this.data.id,&#10;        }).then(res =&gt; {&#10;          this.setState({&#10;            pageData: setDataFulfilled(getDefaultPlainData(), this.state.pageData, res)&#10;          }, resolve)&#10;        }).catch(err =&gt; {&#10;          this.setState({&#10;            pageData: setDataRejected(getDefaultPlainData(), this.state.pageData, err)&#10;          }, reject)&#10;        })&#10;      })&#10;    })&#10;  }&#10;&#10;  updateWhenLocationSearchChange(props) {&#10;    const searchObj = qs.parse(props.location.search)&#10;    this.data.id = searchObj.id&#10;    // this.fetchPageData()&#10;  }&#10;&#10;  componentWillMount() {&#10;    document.title = 'template title'&#10;  }&#10;&#10;  componentDidMount() {&#10;    this.updateWhenLocationSearchChange(this.props)&#10;  }&#10;&#10;  componentDidUpdate(prevProps, prevState, snapshot) {&#10;    if (this.props.location.search !== prevProps.location.search) {&#10;      this.updateWhenLocationSearchChange(this.props)&#10;    }&#10;  }&#10;&#10;  render() {&#10;    const { pageData } = this.state&#10;&#10;    pageData.fetching = false&#10;    pageData.fetched = true&#10;&#10;    return (&#10;      &lt;BasePage&#10;        fetching={pageData.fetching}&#10;        fetched={pageData.fetched}&#10;      &gt;&#10;        &lt;div className={styl.page}&gt;template&lt;/div&gt;&#10;      &lt;/BasePage&gt;&#10;    )&#10;  }&#10;}&#10;&#10;Page.propTypes = {}&#10;&#10;export default Page&#10;" description="base page" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>